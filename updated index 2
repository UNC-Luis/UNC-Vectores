<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Calculadora Interactiva de Vectores 3D</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
            overflow-x: hidden;
            -webkit-text-size-adjust: 100%;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 8px;
        }

        .header {
            text-align: center;
            color: white;
            margin-bottom: 15px;
            padding: 10px;
        }

        .header h1 {
            font-size: clamp(1.2em, 5vw, 2.5em);
            margin-bottom: 8px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            line-height: 1.2;
        }

        .header p {
            font-size: clamp(0.8em, 3vw, 1.2em);
            opacity: 0.9;
            line-height: 1.3;
        }

        .main-content {
            display: grid;
            gap: 12px;
            min-height: calc(100vh - 120px);
        }

        /* Desktop Layout */
        @media (min-width: 1025px) {
            .main-content {
                grid-template-columns: 1fr 300px 300px;
            }
        }

        /* Tablet Layout */
        @media (min-width: 769px) and (max-width: 1024px) {
            .main-content {
                grid-template-columns: 1fr 280px;
                grid-template-rows: 60vh auto;
            }
            
            .results-panel {
                grid-column: 1 / -1;
            }
        }

        /* Mobile Layout */
        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
                grid-template-rows: 45vh auto auto;
                gap: 8px;
            }
            
            .container {
                padding: 4px;
            }
            
            .header {
                margin-bottom: 8px;
                padding: 5px;
            }
        }

        .controls-panel, .results-panel {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 12px;
            padding: 12px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            overflow-y: auto;
            max-height: 80vh;
        }

        @media (max-width: 768px) {
            .controls-panel, .results-panel {
                padding: 10px;
                border-radius: 10px;
                max-height: none;
            }
        }

        .visualization-container {
            background: rgba(255, 255, 255, 0.98);
            border-radius: 12px;
            padding: 10px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            position: relative;
            min-height: 300px;
            touch-action: none;
        }

        @media (max-width: 768px) {
            .visualization-container {
                padding: 8px;
                border-radius: 10px;
                min-height: 250px;
            }
        }

        .section-title {
            font-size: clamp(0.9em, 3vw, 1.3em);
            font-weight: bold;
            color: #4a5568;
            margin-bottom: 12px;
            border-bottom: 2px solid #e2e8f0;
            padding-bottom: 6px;
        }

        .vector-input {
            background: #f8fafc;
            border-radius: 8px;
            padding: 10px;
            margin-bottom: 10px;
            border: 2px solid #e2e8f0;
            transition: all 0.3s ease;
        }

        @media (max-width: 768px) {
            .vector-input {
                padding: 8px;
                margin-bottom: 8px;
            }
        }

        .vector-input:hover, .vector-input:focus-within {
            border-color: #667eea;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.15);
        }

        .vector-title {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .vector-label {
            font-weight: bold;
            color: #2d3748;
            font-size: clamp(0.85em, 2.5vw, 1em);
        }

        .add-vector-btn, .delete-vector-btn {
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
            touch-action: manipulation;
        }

        .add-vector-btn {
            background: #48bb78;
            color: white;
            margin-bottom: 12px;
            padding: 12px 16px;
            font-size: clamp(11px, 2.5vw, 14px);
            width: 100%;
        }

        .delete-vector-btn {
            background: #f56565;
            color: white;
            padding: 6px 10px;
            font-size: clamp(9px, 2vw, 11px);
        }

        @media (max-width: 768px) {
            .add-vector-btn {
                padding: 14px 16px;
                font-size: 14px;
            }
            
            .delete-vector-btn {
                padding: 8px 12px;
                font-size: 12px;
            }
        }

        .coordinate-inputs {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 6px;
        }

        @media (max-width: 480px) {
            .coordinate-inputs {
                gap: 4px;
            }
        }

        .coord-group {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .coord-label {
            font-size: clamp(0.75em, 2.5vw, 0.9em);
            font-weight: bold;
            color: #4a5568;
            margin-bottom: 4px;
        }

        input[type="number"], select {
            width: 100%;
            border: 2px solid #cbd5e0;
            border-radius: 6px;
            text-align: center;
            transition: all 0.3s ease;
            background: white;
            -webkit-appearance: none;
            -moz-appearance: textfield;
        }

        input[type="number"] {
            padding: 8px 4px;
            font-size: clamp(14px, 3vw, 16px);
        }

        select {
            padding: 10px 8px;
            font-size: clamp(12px, 2.5vw, 14px);
            margin-bottom: 8px;
        }

        @media (max-width: 768px) {
            input[type="number"] {
                padding: 12px 6px;
                font-size: 16px; /* Prevents zoom on iOS */
            }
            
            select {
                padding: 12px 10px;
                font-size: 16px; /* Prevents zoom on iOS */
            }
        }

        input[type="number"]:focus, select:focus {
            border-color: #667eea;
            outline: none;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        input[type="number"]::-webkit-outer-spin-button,
        input[type="number"]::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        .mode-toggle {
            display: flex;
            gap: 6px;
            margin-bottom: 12px;
        }

        @media (max-width: 480px) {
            .mode-toggle {
                gap: 4px;
            }
        }

        .mode-btn {
            flex: 1;
            padding: 10px 8px;
            border: none;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: clamp(12px, 2.5vw, 14px);
            touch-action: manipulation;
        }

        @media (max-width: 768px) {
            .mode-btn {
                padding: 14px 10px;
                font-size: 14px;
            }
        }

        .mode-btn.active {
            background: #667eea;
            color: white;
            transform: scale(1.02);
        }

        .mode-btn:not(.active) {
            background: #e2e8f0;
            color: #4a5568;
        }

        .operation-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
            margin-top: 12px;
        }

        @media (max-width: 480px) {
            .operation-buttons {
                grid-template-columns: 1fr;
                gap: 6px;
            }
        }

        .op-btn {
            padding: 12px 8px;
            border: none;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: clamp(11px, 2.5vw, 13px);
            text-align: center;
            touch-action: manipulation;
            line-height: 1.2;
        }

        @media (max-width: 768px) {
            .op-btn {
                padding: 16px 12px;
                font-size: 13px;
            }
        }

        .op-btn:active {
            transform: scale(0.98);
        }

        .op-btn.suma { background: #48bb78; color: white; }
        .op-btn.resta { background: #ed8936; color: white; }
        .op-btn.escalar { background: #9f7aea; color: white; }
        .op-btn.cruz { background: #f56565; color: white; }
        .op-btn.magnitud { background: #38b2ac; color: white; }
        .op-btn.clear { background: #a0aec0; color: white; }

        .result-section {
            background: #f8fafc;
            border-radius: 8px;
            padding: 10px;
            margin-bottom: 10px;
            border-left: 4px solid #667eea;
        }

        .result-title {
            font-weight: bold;
            color: #2d3748;
            margin-bottom: 8px;
            font-size: clamp(0.85em, 2.5vw, 1em);
        }

        .result-value {
            font-family: 'Courier New', monospace;
            background: white;
            padding: 8px;
            border-radius: 6px;
            border: 1px solid #e2e8f0;
            margin-bottom: 8px;
            font-size: clamp(12px, 2.5vw, 14px);
            word-break: break-all;
            line-height: 1.3;
        }

        .algebra-steps {
            background: white;
            border-radius: 6px;
            padding: 8px;
            border: 1px solid #e2e8f0;
            font-family: 'Courier New', monospace;
            font-size: clamp(10px, 2.2vw, 12px);
            line-height: 1.4;
        }

        .algebra-step {
            margin-bottom: 6px;
            padding: 4px;
            border-left: 3px solid #667eea;
            padding-left: 8px;
            word-break: break-all;
        }

        #canvas-container {
            width: 100%;
            height: 100%;
            border-radius: 8px;
            overflow: hidden;
            min-height: 250px;
            touch-action: none;
        }

        @media (max-width: 768px) {
            #canvas-container {
                min-height: 200px;
            }
        }

        .canvas-controls {
            position: absolute;
            top: 8px;
            left: 8px;
            background: rgba(255, 255, 255, 0.95);
            padding: 6px 8px;
            border-radius: 6px;
            font-size: clamp(9px, 2vw, 11px);
            line-height: 1.2;
            backdrop-filter: blur(10px);
        }

        .vector-info {
            position: absolute;
            top: 8px;
            right: 8px;
            background: rgba(255, 255, 255, 0.95);
            padding: 6px 8px;
            border-radius: 6px;
            font-size: clamp(9px, 2vw, 11px);
            max-width: 150px;
            line-height: 1.2;
            word-break: break-all;
            backdrop-filter: blur(10px);
        }

        @media (max-width: 480px) {
            .canvas-controls, .vector-info {
                position: relative;
                top: auto;
                left: auto;
                right: auto;
                margin-bottom: 8px;
                max-width: 100%;
                display: inline-block;
                margin-right: 8px;
            }
            
            .canvas-controls {
                margin-bottom: 4px;
            }
        }

        /* Prevent scrolling issues on mobile */
        @media (max-width: 768px) {
            body {
                position: fixed;
                width: 100%;
                height: 100%;
                overflow: hidden;
            }
            
            .container {
                height: 100vh;
                overflow-y: auto;
                -webkit-overflow-scrolling: touch;
            }
        }

        /* Loading indicator */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
            color: #666;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🎯 Calculadora de Vectores 3D</h1>
            <p>Explora álgebra vectorial interactiva</p>
        </div>

        <div class="main-content">
            <!-- Visualización 3D -->
            <div class="visualization-container">
                <div id="canvas-container">
                    <div class="loading">Cargando visualización 3D...</div>
                </div>
                <div class="canvas-controls">
                    <strong>Controles:</strong><br>
                    📱 Tocar y arrastrar: Rotar<br>
                    🔍 Pellizcar: Zoom
                </div>
                <div class="vector-info" id="vector-info">
                    <strong>Vectores</strong><br>
                    A: (3, 2, 1)<br>
                    B: (1, 4, 2)
                </div>
            </div>

            <!-- Panel de Controles -->
            <div class="controls-panel">
                <div class="section-title">⚙️ Controles</div>
                
                <div class="mode-toggle">
                    <button class="mode-btn active" id="mode-3d">3D</button>
                    <button class="mode-btn" id="mode-2d">2D</button>
                </div>

                <button class="add-vector-btn" onclick="addVector()">➕ Agregar Vector</button>

                <div id="vectors-container">
                    <div class="vector-input" data-vector="A">
                        <div class="vector-title">
                            <label class="vector-label">Vector A</label>
                            <button class="delete-vector-btn" onclick="deleteVector('A')" style="display: none;">🗑️</button>
                        </div>
                        <div class="coordinate-inputs">
                            <div class="coord-group">
                                <span class="coord-label">X</span>
                                <input type="number" id="ax" value="3" step="0.1" inputmode="decimal">
                            </div>
                            <div class="coord-group">
                                <span class="coord-label">Y</span>
                                <input type="number" id="ay" value="2" step="0.1" inputmode="decimal">
                            </div>
                            <div class="coord-group">
                                <span class="coord-label">Z</span>
                                <input type="number" id="az" value="1" step="0.1" inputmode="decimal">
                            </div>
                        </div>
                    </div>

                    <div class="vector-input" data-vector="B">
                        <div class="vector-title">
                            <label class="vector-label">Vector B</label>
                            <button class="delete-vector-btn" onclick="deleteVector('B')" style="display: none;">🗑️</button>
                        </div>
                        <div class="coordinate-inputs">
                            <div class="coord-group">
                                <span class="coord-label">X</span>
                                <input type="number" id="bx" value="1" step="0.1" inputmode="decimal">
                            </div>
                            <div class="coord-group">
                                <span class="coord-label">Y</span>
                                <input type="number" id="by" value="4" step="0.1" inputmode="decimal">
                            </div>
                            <div class="coord-group">
                                <span class="coord-label">Z</span>
                                <input type="number" id="bz" value="2" step="0.1" inputmode="decimal">
                            </div>
                        </div>
                    </div>
                </div>

                <div style="margin: 12px 0;">
                    <label style="font-weight: bold; display: block; margin-bottom: 8px; font-size: clamp(0.8em, 2.5vw, 0.9em);">🎯 Seleccionar Vectores:</label>
                    <select id="vector1-select">
                        <option value="A">Vector A</option>
                        <option value="B">Vector B</option>
                    </select>
                    <select id="vector2-select">
                        <option value="A">Vector A</option>
                        <option value="B" selected>Vector B</option>
                    </select>
                </div>

                <div class="operation-buttons">
                    <button class="op-btn suma" onclick="performOperation('suma')">➕ Suma</button>
                    <button class="op-btn resta" onclick="performOperation('resta')">➖ Resta</button>
                    <button class="op-btn escalar" onclick="performOperation('escalar')">⚫ Escalar</button>
                    <button class="op-btn cruz" onclick="performOperation('cruz')">✖️ Cruz</button>
                    <button class="op-btn magnitud" onclick="performOperation('magnitud')">📏 Magnitud</button>
                    <button class="op-btn clear" onclick="clearResults()">🗑️ Limpiar</button>
                </div>
            </div>

            <!-- Panel de Resultados -->
            <div class="results-panel">
                <div class="section-title">📊 Resultados</div>
                <div id="results-container">
                    <div class="result-section">
                        <div class="result-title">🔢 Selecciona una operación</div>
                        <p style="color: #666; font-style: italic; font-size: clamp(11px, 2.5vw, 14px);">Los resultados aparecerán aquí.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let scene, camera, renderer;
        let vectors = { A: null, B: null };
        let vectorArrows = {};
        let vectorColors = ['#ff4444', '#4444ff', '#44ff44', '#ff44ff', '#ffff44', '#44ffff', '#ff8844', '#8844ff'];
        let vectorLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
        let is2DMode = false;
        let vectorArrowResult;
        let parallelogram;
        let isMobile = window.innerWidth <= 768;

        function initThreeJS() {
            const container = document.getElementById('canvas-container');
            
            // Clear loading message
            container.innerHTML = '';
            
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0xf0f0f0);
            
            camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
            camera.position.set(8, 8, 8);
            
            renderer = new THREE.WebGLRenderer({ 
                antialias: !isMobile, // Disable antialiasing on mobile for performance
                powerPreference: "high-performance"
            });
            renderer.setSize(container.clientWidth, container.clientHeight);
            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // Limit pixel ratio for performance
            container.appendChild(renderer.domElement);
            
            setupControls();
            
            const ambientLight = new THREE.AmbientLight(0x404040, 0.6);
            scene.add(ambientLight);
            
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight.position.set(10, 10, 5);
            scene.add(directionalLight);
            
            const axesHelper = new THREE.AxesHelper(10);
            scene.add(axesHelper);
            
            const gridHelper = new THREE.GridHelper(20, 20, 0x888888, 0xcccccc);
            scene.add(gridHelper);
            
            updateVectors();
            animate();
            
            window.addEventListener('resize', onWindowResize);
        }

        function setupControls() {
            let isDragging = false;
            let previousPosition = { x: 0, y: 0 };
            let initialDistance = 0;
            let initialScale = 1;

            function getEventPosition(e) {
                if (e.touches && e.touches.length > 0) {
                    return { x: e.touches[0].clientX, y: e.touches[0].clientY };
                }
                return { x: e.clientX, y: e.clientY };
            }

            function getDistance(touch1, touch2) {
                const dx = touch1.clientX - touch2.clientX;
                const dy = touch1.clientY - touch2.clientY;
                return Math.sqrt(dx * dx + dy * dy);
            }

            // Mouse/Touch Start
            function onStart(e) {
                e.preventDefault();
                
                if (e.touches && e.touches.length === 2) {
                    // Pinch zoom start
                    initialDistance = getDistance(e.touches[0], e.touches[1]);
                    initialScale = camera.position.length();
                    return;
                }
                
                isDragging = true;
                const pos = getEventPosition(e);
                previousPosition = { x: pos.x, y: pos.y };
            }

            // Mouse/Touch Move
            function onMove(e) {
                e.preventDefault();
                
                if (e.touches && e.touches.length === 2) {
                    // Pinch zoom
                    const currentDistance = getDistance(e.touches[0], e.touches[1]);
                    const scale = currentDistance / initialDistance;
                    const newScale = initialScale / scale;
                    
                    camera.position.setLength(Math.max(2, Math.min(50, newScale)));
                    return;
                }
                
                if (!isDragging) return;
                
                const pos = getEventPosition(e);
                const deltaMove = {
                    x: pos.x - previousPosition.x,
                    y: pos.y - previousPosition.y
                };
                
                const spherical = new THREE.Spherical();
                spherical.setFromVector3(camera.position);
                
                spherical.theta -= deltaMove.x * 0.01;
                spherical.phi += deltaMove.y * 0.01;
                spherical.phi = Math.max(0.1, Math.min(Math.PI - 0.1, spherical.phi));
                
                camera.position.setFromSpherical(spherical);
                camera.lookAt(0, 0, 0);
                
                previousPosition = { x: pos.x, y: pos.y };
            }

            // Mouse/Touch End
            function onEnd(e) {
                e.preventDefault();
                isDragging = false;
            }

            // Mouse events
            renderer.domElement.addEventListener('mousedown', onStart, { passive: false });
            renderer.domElement.addEventListener('mousemove', onMove, { passive: false });
            renderer.domElement.addEventListener('mouseup', onEnd, { passive: false });

            // Touch events
            renderer.domElement.addEventListener('touchstart', onStart, { passive: false });
            renderer.domElement.addEventListener('touchmove', onMove, { passive: false });
            renderer.domElement.addEventListener('touchend', onEnd, { passive: false });

            // Mouse wheel
            renderer.domElement.addEventListener('wheel', (e) => {
                e.preventDefault();
                const scale = e.deltaY > 0 ? 1.1 : 0.9;
                const newLength = Math.max(2, Math.min(50, camera.position.length() * scale));
                camera.position.setLength(newLength);
            }, { passive: false });
        }

        function createArrow(start, end, color) {
            const direction = new THREE.Vector3().subVectors(end, start);
            const length = direction.length();
            
            if (length === 0) return null;
            
            direction.normalize();
            const arrowHelper = new THREE.ArrowHelper(direction, start, length, color, length * 0.2, length * 0.1);
            return arrowHelper;
        }

        function updateVectors() {
            Object.values(vectorArrows).forEach(arrow => {
                if (arrow) scene.remove(arrow);
            });
            if (vectorArrowResult) scene.remove(vectorArrowResult);
            if (parallelogram) scene.remove(parallelogram);
            
            vectorArrows = {};
            
            const vectorInputs = document.querySelectorAll('.vector-input');
            vectorInputs.forEach((input, index) => {
                const letter = input.dataset.vector;
                const x = parseFloat(input.querySelector(`#${letter.toLowerCase()}x`).value) || 0;
                const y = parseFloat(input.querySelector(`#${letter.toLowerCase()}y`).value) || 0;
                const z = is2DMode ? 0 : (parseFloat(input.querySelector(`#${letter.toLowerCase()}z`).value) || 0);
                
                vectors[letter] = new THREE.Vector3(x, y, z);
                
                const origin = new THREE.Vector3(0, 0, 0);
                const color = vectorColors[index % vectorColors.length];
                vectorArrows[letter] = createArrow(origin, vectors[letter], color);
                if (vectorArrows[letter]) scene.add(vectorArrows[letter]);
            });
            
            updateVectorInfo();
            updateVectorSelectors();
        }

        function updateVectorSelectors() {
            const select1 = document.getElementById('vector1-select');
            const select2 = document.getElementById('vector2-select');
            
            const currentValues = [select1.value, select2.value];
            
            select1.innerHTML = '';
            select2.innerHTML = '';
            
            Object.keys(vectors).forEach(letter => {
                const option1 = new Option(`Vector ${letter}`, letter);
                const option2 = new Option(`Vector ${letter}`, letter);
                select1.add(option1);
                select2.add(option2);
            });
            
            if (currentValues[0] && vectors[currentValues[0]]) select1.value = currentValues[0];
            if (currentValues[1] && vectors[currentValues[1]]) select2.value = currentValues[1];
        }

        function updateVectorInfo() {
            const infoContainer = document.getElementById('vector-info');
            let infoHTML = '<strong>Vectores</strong><br>';
            
            Object.entries(vectors).forEach(([letter, vector]) => {
                infoHTML += `${letter}: (${vector.x.toFixed(1)}, ${vector.y.toFixed(1)}, ${vector.z.toFixed(1)})<br>`;
            });
            
            infoContainer.innerHTML = infoHTML;
        }

        function addVector() {
            const existingVectors = Object.keys(vectors);
            let newLetter = null;
            
            for (let letter of vectorLetters) {
                if (!existingVectors.includes(letter)) {
                    newLetter = letter;
                    break;
                }
            }
            
            if (!newLetter) {
                alert('Máximo 8 vectores permitidos');
                return;
            }
            
            const container = document.getElementById('vectors-container');
            const vectorHTML = `
                <div class="vector-input" data-vector="${newLetter}">
                    <div class="vector-title">
                        <label class="vector-label">Vector ${new
